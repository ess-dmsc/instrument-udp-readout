DEFINE COMPONENT Event_broadcaster
DEFINITION PARAMETERS()
SETTING PARAMETERS (
string ip = 0,
int port = 9000,
int broadcast = 1,
string user1=""
)
OUTPUT PARAMETERS ()
DEPENDENCY "-I src -L. -lwrapper"
SHARE
%{
#include <sys/time.h>
#include <stdlib.h>
#include <stdint.h>
#include <wrapper.h>

#include <unistd.h>

  struct efu_time {
    uint32_t hi;
    uint32_t lo;
  };
  typedef struct efu_time efu_time_t;

  void throw_error(char* named, char* variable){
    printf("Event_broadcaster: %s: Particle variable %s inaccessible, exiting.\n", named, variable);
    exit(-1);
  }

  //
  // Functions for calculating digital identifiers below
  //

  // degrees to radians
  #define D2R(deg) (deg * 2 * 3.1415926536/360.0)

  // HeTube in ICD nomenclature where tubes increase clockwise
  uint8_t getTubeId(double x, double y, double z) {
    double thmin = D2R(  9.48);
    double thmax = D2R(165.00);
    double tubearc = D2R(3.24);
    //printf("thmin %f, thmax %f, arc %f\n", thmin, thmax, tubearc);

    double r = sqrt(z*z + x*x);
    double theta = acos(1.0*z/r);
    uint8_t hetube = 47 - (theta - thmin)/tubearc;
    //printf("theta: %f, hetube %u\n", theta, hetube);

    if ((theta < thmin) || (theta > thmax)) {
      return 255;
    } else {
      return hetube;
    }
  }


  // Rings depend on hetube # and y-position (four quadrants)
  uint8_t getRingId(uint8_t hetube, double y) {
    uint8_t RING;
    if (hetube > 23) {
      if (y >= 0) {
        RING = 1;
      } else {
        RING = 3;
      }
    } else {
      if (y >= 0) {
        RING = 0;
      } else {
        RING = 2;
      }
    }
    return RING;
  }


  // Amplitudes are dependent on 'A' or 'B' end of a tube-pair and y value
  // distances estimated from technical drawing ESSB-MRCL-SS-1500[3].PDF
  // AorB: 0: A-tube, 1: B-tube
  //
  // TODO this is still not correct and we're using hardcoded values
  // also (guessing) tubepair may be uptide down for lower banks and
  // this A anb B might be swapped.
  void getAmplitudes(double y, int AorB, uint16_t * A, uint16_t * B) {
    double ymin =       0.133; // mm
    double tubeheight = 0.150; // mm

    if ((fabs(y) < ymin) || (fabs(y) > (ymin + tubeheight))) {
      //printf("y-value %f outside tube\n", y);
      *A = 0;
      *B = 0;
      return;
    }

    // for now hardcode A and B to the upper 1/8'th of a tube
    // TODO needs fixing (maybe)
    if (AorB == 0 ) { // A-end of tube
      *A = 1000;
      *B = 7000;
    } else { // B-end of tube
      *A = 7000;
      *B = 1000;
    }
    return;
  }

%}

DECLARE
%{
// pre-declare the stateful object
miracles_readout_t* miracles;
efu_time_t last_time;
efu_time_t repetition_time;
efu_time_t offset_time;
efu_time_t now_time;
%}

INITIALIZE
%{
  // Include the header file and run any initialization for the real broadcaster
  if (ip == 0 || ip[0] == '\0'){
  	miracles = miracles_readout_create("127.0.0.1", port);
  } else {
  	miracles = miracles_readout_create(ip, port);
  }

  miracles_readout_setPulseTime(miracles, 0, 0, 0, 0);
  miracles_readout_newPacket(miracles);

%}

TRACE
%{
  uint8_t RING;
  uint8_t FEN=0;
  uint8_t TubePair;
  uint16_t A;
  uint16_t B;
  double TOF;
  double t0;
  int fail;

  if (broadcast){
	  // TODO combine these three into a single 'flush' call?
	  miracles_readout_send(miracles);
		miracles_readout_newPacket(miracles);
	  miracles_readout_setPulseTime(miracles, 0, 0, 0, 0);
	}

  t0 = particle_getvar(_particle, user1, &fail);


  // Send the event to the broadcaster to be accumulated and broadcast
  if (broadcast) {
    uint8_t hetube = getTubeId(x, y, z);

    RING = getRingId(hetube, y);

    TubePair = (hetube % 24)/2;

    if ((RING == 2) || (RING == 3)) {
      hetube += 48;
    }

    getAmplitudes(y, hetube % 2, &A, &B);

    if (!((A == 0) && (B == 0))) {
      TOF = (int)(1000000000 * t);

      //printf("\n NEUTRON at theta %f, hetube %u, tube_pair %u (x,y,z %f %f %f), t %.0f(us)\n", theta, hetube, tube_pair, x, y, z, t*1000000);
      printf("READOUT - RING %u, FEN %u, TUBE %2u (hetube %2u) - A %5u, B %5u, TOF %10u (ns)\n", \
             RING, FEN, TubePair, hetube, A, B, (int)TOF);
      miracles_readout_add(miracles, 2 * RING, FEN, 0, (int)TOF, TubePair, A, B);
    }

  }
%}

FINALLY
%{
  // perform any teardown of the stateful broadcaster
  if (broadcast) miracles_readout_send(miracles);
    miracles_readout_destroy(miracles);
%}

MCDISPLAY
%{
%}

END
